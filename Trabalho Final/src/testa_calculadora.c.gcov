        -:    0:Source:testa_calculadora.c
        -:    0:Graph:obj/testa_calculadora.gcno
        -:    0:Data:obj/testa_calculadora.gcda
        -:    0:Runs:4
        -:    0:Programs:2
        -:    1:/*Trabalho Final de Métodos de Programação
        -:    2:Professor: Jan Correa
        -:    3:Alunos: Marcos Paulo Cayres Rosa - 14/0027131
        -:    4:	Ingrid Santana Lopes - 14/0083065
        -:    5:	Felipe Lira Fernandes dos Santos - 14/0019821
        -:    6:- Programa principal, compilado com 'make', estando presente na pasta src junto com o 'Makefile', 'calculadora.c' e 'pilha.c'
        -:    7:*/
        -:    8:
        -:    9:#include <stdio.h>
        -:   10:#include <stdlib.h>
        -:   11:#include "CUnit/Basic.h"
        -:   12:#include "pilha.h"
        -:   13:#include "calculadora.h"
        -:   14:
        -:   15:/* Ponteiro para variável global da Pilha e para o arquivo usado nos testes. */
        -:   16:static Pilha* p = NULL;
        -:   17:static FILE* fp_txt = NULL;
        -:   18:
        -:   19:/* Função de incialização da suíte, criando uma pilha que será usada para testes e retornando EXIT_SUCCESS em caso de sucesso (EXIT_FAILURE caso contrário). */
        4:   20:int init_suite1(void){
        4:   21:	if( NULL == (p = cria_pilha()) )
    #####:   22:		return EXIT_FAILURE;
        -:   23:	else
        4:   24:		return EXIT_SUCCESS;
        -:   25:}
        -:   26:
        -:   27:/* Função de limpeza da suíte, liberando uma pilha que será usada para testes e retornando EXIT_SUCCESS em caso de sucesso (EXIT_FAILURE caso contrário). */
        4:   28:int clean_suite1(void){
        4:   29:	libera_pilha(p);
        4:   30:	if( NULL == p )
    #####:   31:		return EXIT_FAILURE;
        -:   32:	else
        4:   33:		return EXIT_SUCCESS;
        -:   34:}
        -:   35:
        -:   36:/* Função de incialização da suíte, abrindo um arquivo texto que será usado para testes e retornando EXIT_SUCCESS em caso de sucesso (EXIT_FAILURE caso contrário). */
        4:   37:int init_suite2(void){
        4:   38:	if( NULL == (fp_txt = fopen("testes.txt", "r+")) )
    #####:   39:		return EXIT_FAILURE;
        -:   40:	else
        4:   41:		return EXIT_SUCCESS;
        -:   42:}
        -:   43:
        -:   44:/* Função de limpeza da suíte, fechando um arquivo texto que será usado para testes e retornando EXIT_SUCCESS em caso de sucesso (EXIT_FAILURE caso contrário). */
        4:   45:int clean_suite2(void){
        4:   46:	if( 0 != fclose(fp_txt) )
    #####:   47:		return EXIT_FAILURE;
        -:   48:	else
        4:   49:		return EXIT_SUCCESS;
        -:   50:}
        -:   51:
        -:   52:/* Função de teste da função criarNovoAequivo(void). */
        4:   53:void testaAberturaArq(void){
        4:   54:	criaNovoArquivo();
        4:   55:	FILE *fp = fopen("operacoes.txt","r");
        4:   56:	CU_ASSERT(fp != NULL);
        4:   57:	fclose(fp);
        4:   58:}
        -:   59:
        -:   60:/* Função de teste da função leitura(char *nomearq). */
        4:   61:void testaLEITURA(void){
        4:   62:	char c = '\0', nomearq[50], valid_str[3];
        -:   63:	int validacao;
        -:   64:	/*Automatização do teste da função, analisando diversos arquivos e verificando se esses possuem parentização correta*/	
       68:   65:	while(c != EOF){	
       60:   66:		fscanf(fp_txt, "%s", nomearq);
       60:   67:		c = fgetc(fp_txt);
      240:   68:		while(c < 'A')
      120:   69:			c = fgetc(fp_txt);
       60:   70:		fseek(fp_txt, -1, SEEK_CUR);
        -:   71:
       60:   72:		fscanf(fp_txt, "%s", valid_str);
       60:   73:		valid_str[3] = '\0';
       60:   74:		if(strcmp(valid_str,"VAL") == 0 || strcmp(valid_str,"val") == 0) validacao = EXIT_SUCCESS;
       44:   75:		else validacao = EXIT_FAILURE;
        -:   76:
       60:   77:		if(validacao == EXIT_SUCCESS) printf("\n\t%s||VALIDO", nomearq);
       44:   78:		else printf("\n\t%s||INVALIDO", nomearq);
       60:   79:		CU_ASSERT(validacao == leitura(nomearq));
        -:   80:
      188:   81:		while(c != '\n' && c != EOF)
       68:   82:			c = fgetc(fp_txt);
       60:   83:		c = fgetc(fp_txt);
       60:   84:		if(c != EOF) fseek(fp_txt, -1, SEEK_CUR);
        -:   85:	}/*while*/
        4:   86:}
        -:   87:
        -:   88:/* Função de teste da função EditarExpr(char *nomearq). */
        4:   89:void testaEDICAO(void){
        4:   90:	char c = '\0', nomearq[50], valid_str[9], resp = '\0';
        -:   91:	int validacao;
        -:   92:
        4:   93:	fseek(fp_txt, 0, SEEK_SET);
        -:   94:	/*Automatização do teste da função, analisando diversos arquivos e verificando se esses possuem parentização correta*/	
       68:   95:	while(c != EOF){	
       60:   96:		fscanf(fp_txt, "%s", nomearq);
       60:   97:		c = fgetc(fp_txt);
      240:   98:		while(c < 'A')
      120:   99:			c = fgetc(fp_txt);
       60:  100:		fseek(fp_txt, -1, SEEK_CUR);
        -:  101:
       60:  102:		printf("\n\tDeseja editar a expressão do arquivo \"%s\"? (S/N) ", nomearq);
       60:  103:		scanf("%c", &resp);
       60:  104:		getchar();
       60:  105:		if(resp == 'S' || resp == 's'){
        8:  106:			printf("\n\tA expressão será válida? (S/N) ");
        8:  107:			scanf("%c", &resp);
        8:  108:			getchar();
        8:  109:			if(resp == 'S' || resp == 's'){
        4:  110:				validacao = EXIT_SUCCESS;
        4:  111:				strcpy(valid_str,"VALIDO");
        4:  112:				fprintf(fp_txt, "%s", "VAL");
        -:  113:			}
        -:  114:			else{
        4:  115:				validacao = EXIT_FAILURE;
        4:  116:				strcpy(valid_str,"INVALIDO");
        4:  117:				fprintf(fp_txt, "INV");
        -:  118:			}
        8:  119:			printf("\n\t%s||%s",nomearq,valid_str);
        8:  120:			CU_ASSERT(validacao == EditarExpr(nomearq));
        -:  121:		}
        -:  122:
      344:  123:		while(c != '\n' && c != EOF)
      224:  124:			c = fgetc(fp_txt);
        -:  125:
       60:  126:		c = fgetc(fp_txt);
       60:  127:		if(c != EOF) fseek(fp_txt, -1, SEEK_CUR);
        -:  128:	}/*while*/
        4:  129:}
        -:  130:
        -:  131:/* Função principal para estabelecer e rodar os testes, retornando CUE_SUCCESS em caso de sucesso e outro 'CUnit error code' caso contrário. */
        4:  132:int main(){
        -:  133:
        4:  134:	CU_pSuite pSuite_Pilha = NULL;
        4:  135:	CU_pSuite pSuite_File = NULL;
        -:  136:
        4:  137:	printf("\033[2J");	
        4:  138:	printf("\033[1;1f");
        -:  139:	
        -:  140:	/* Inicializa o registro de testes CUnit. */
        4:  141:	if (CUE_SUCCESS != CU_initialize_registry())
    #####:  142:		return CU_get_error();
        -:  143:
        -:  144:	/* Inclui uma suíte ao registro. */
        4:  145:	pSuite_Pilha = CU_add_suite("Suite_Pilha", init_suite1, clean_suite1);
        4:  146:	if (NULL == pSuite_Pilha) {
    #####:  147:		CU_cleanup_registry();
    #####:  148:		return CU_get_error();
        -:  149:	}/*if*/
        -:  150:
        4:  151:	pSuite_File = CU_add_suite("Suite_File", init_suite2, clean_suite2);
        4:  152:	if (NULL == pSuite_File) {
    #####:  153:		CU_cleanup_registry();
    #####:  154:		return CU_get_error();
        -:  155:	}/*if*/
        -:  156:
        -:  157:	/* Adiciona os testes às suítes. */
        8:  158:	if ( (NULL==CU_add_test(pSuite_File, "teste de criarNovoArquivo(void)",testaAberturaArq)) ||
        8:  159:	     (NULL == CU_add_test(pSuite_File, "teste de leitura(char *nomearq)", testaLEITURA)) ||
        4:  160:	     (NULL==CU_add_test(pSuite_File, "teste de EditarExpr(char *nomearq)",testaEDICAO)) )
        -:  161:   	{
    #####:  162:		CU_cleanup_registry();
    #####:  163:		return CU_get_error();
        -:  164:	}/*if*/
        -:  165:
        -:  166:	/* Roda todos os teste usando o 'CUnit Basic interface'. */
        4:  167:	CU_basic_set_mode(CU_BRM_VERBOSE);
        4:  168:	CU_basic_run_tests();
        4:  169:	CU_cleanup_registry();
        4:  170:	return CU_get_error();
        -:  171:}
